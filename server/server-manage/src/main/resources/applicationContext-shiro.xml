<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	                       http://www.springframework.org/schema/beans/spring-beans.xsd
	                       http://www.springframework.org/schema/util
	                       http://www.springframework.org/schema/util/spring-util.xsd">

    <description>server-manage</description>

    <!-- Shiro的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="${zheng.upms.sso.server.url}"/> <!-- 登陆页 main -->
        <property name="successUrl" value="${zheng.upms.successUrl}"/>
        <property name="unauthorizedUrl" value="${zheng.upms.unauthorizedUrl}"/> <!-- 授权失败时重定向到的地址 -->
        <property name="filters">
            <util:map>
                <entry key="authc" value-ref="upmsAuthenticationFilter"/>
                <entry key="statelessAuthc" value-ref="statelessAuthcFilter"/>
            </util:map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                /manage/** = upmsSessionForceLogout,authc
                /stateless/login/** = anon
                /stateless/** = statelessAuthc
                /druid/** = user
                /swagger-ui.html = user
                /resources/** = anon
                /static/** = anon
                /** = anon
            </value>
        </property>
    </bean>

    <!-- 重写authc过滤器 -->
    <bean id="upmsAuthenticationFilter" class="com.shun.server.shiro.filter.UpmsAuthenticationFilter"/>
    <!-- 强制退出会话过滤器 -->
    <bean id="upmsSessionForceLogout" class="com.shun.server.shiro.filter.UpmsSessionForceLogoutFilter"/>
    <!-- 无状态 Web 过滤器 -->
    <bean id="statelessAuthcFilter" class="com.shun.server.shiro.filter.StatelessAuthcFilter"/>

    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="sessionManager" ref="sessionManager"/>
        <property name="rememberMeManager" ref="rememberMeManager"/>

        <!--<property name="subjectFactory" ref="subjectFactory"/>-->
        <!-- authenticator 属性 用于登录认证时调用 -->
        <property name="authenticator" ref="authenticator"/>

        <!-- realms|realm 属性用于登录成功后权限认证 如果只有一个 realm 就向 realm 参数中设置数据 -->
        <property name="realms">
            <list>
                <!-- 可以配置多个Realm -->
                <ref bean="upmsRealm"/>
                <ref bean="statelessRealm"/>
            </list>
        </property>
    </bean>

    <!-- 配置多个Realm -->
    <bean id="authenticator" class="com.shun.server.shiro.realm.CustomModularRealmAuthenticator">
        <!-- 配置单个 Realm 使用 realm 可配置多个使用 realms -->
        <property name="realms">
            <list>
                <!-- 可以配置多个Realm -->
                <ref bean="upmsRealm"/>
                <ref bean="statelessRealm"/>
            </list>
        </property>
        <property name="authenticationStrategy">
            <!-- FirstSuccessfulStrategy : 只要有一个 Realm 验证成功即可，只返回第一个 Realm 身份验证成功的认证信息，其他的忽略
                 AtLeastOneSuccessfulStrategy(默认) : 只要有一个Realm验证成功即可，和 FirstSuccessfulStrategy 不同，将返回所有Realm身份验证成功的认证信息
                 AllSuccessfulStrategy : 所有Realm验证成功才算成功，且返回所有 Realm身份验证成功的认证信息，如果有一个失败就失败 -->
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"/>
        </property>
    </bean>

    <!-- Subject 工厂 -->
    <bean id="subjectFactory" class="com.shun.server.shiro.subject.StatelessDefaultSubjectFactory"/>

    <!-- realm实现，继承自AuthorizingRealm -->
    <bean id="upmsRealm" class="com.shun.server.shiro.realm.UpmsRealm">
        <!--<constructor-arg ref="shiroCacheManager"/>-->
    </bean>
    <bean id="statelessRealm" class="com.shun.server.shiro.realm.StatelessRealm">
        <property name="cachingEnabled" value="false"/>
    </bean>

    <!-- 会话管理器，使用 DefaultWebSessionManager 将直接废弃 Servlet容器的会话管理，自己维护所有的会话 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="${zheng.upms.session.timeout}"/> <!-- 全局session超时时间，默认为30分钟 -->
        <property name="sessionDAO" ref="sessionDAO"/>
        <!-- 是否启用 Session Id Cookie，默认是启用的，禁用后将不设置 Session Id Cookie，即默认使用Servlet 容器的 JSESSIONID，
             且通过 URL 重写 (URL 中的";JSESSIONID=id"部分) 保存 Session Id -->
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/> <!-- sessionManager 创建会话 Cookie 的模板 -->
        <property name="sessionValidationSchedulerEnabled" value="false"/> <!-- 是否定期验证会话是否已过期 -->
        <property name="sessionListeners"> <!-- 会话监听器 -->
            <list>
                <ref bean="sessionListener"/>
            </list>
        </property>
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- 会话DAO，可重写，持久化session -->
    <bean id="sessionDAO" class="com.shun.server.shiro.session.UpmsSessionDao"/>

    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <property name="httpOnly" value="true"/> <!-- 设置为 true 则不会暴露给客户端，这有助于减少某些类型的跨站点脚本攻击 -->
        <property name="maxAge" value="-1"/> <!-- 设置Cookie的过期时间，秒为单位，默认-1表示关闭浏览器时过期Cookie -->
        <property name="name" value="${zheng.upms.session.id}"/> <!-- Cookie名称，用于保存 JSESSID，默认为 JSESSIONID -->
    </bean>

    <!-- 会话监听器 -->
    <bean id="sessionListener" class="com.shun.server.shiro.listener.UpmsSessionListener"/>

    <!-- session工厂 -->
    <bean id="sessionFactory" class="com.shun.server.shiro.session.UpmsSessionFactory"/>

    <!-- rememberMe管理器 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <!-- rememberMe缓存cookie -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/> <!-- 不会暴露给客户端 -->
        <property name="maxAge" value="${zheng.upms.rememberMe.timeout}"/>  <!-- 记住我cookie生效时间，30天 -->
    </bean>

    <!-- 设置SecurityUtils，相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <!-- 开启Shiro Spring AOP权限注解@RequiresPermissions的支持 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- Shiro生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
</beans>
